"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from petstore3.models import operations, shared
from typing import Optional

class Store:
    r"""Access to Petstore orders
    http://swagger.io - Find out more about our store
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def delete_order(self, request: operations.DeleteOrderRequest) -> operations.DeleteOrderResponse:
        r"""Delete purchase order by ID
        For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrderRequest, base_url, '/store/order/{orderId}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def get_inventory(self, security: operations.GetInventorySecurity) -> operations.GetInventoryResponse:
        r"""Returns pet inventories by status
        Returns a map of status codes to quantities
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/store/inventory'
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInventoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, int]])
                res.get_inventory_200_application_json_object = out

        return res

    
    def get_order_by_id(self, request: operations.GetOrderByIDRequest) -> operations.GetOrderByIDResponse:
        r"""Find purchase order by ID
        For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrderByIDRequest, base_url, '/store/order/{orderId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrderByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Order])
                res.order = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 404]:
            pass

        return res

    
    def place_order_form(self, request: shared.Order) -> operations.PlaceOrderFormResponse:
        r"""Place an order for a pet
        Place a new order in the store
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/store/order'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlaceOrderFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Order])
                res.order = out
        elif http_res.status_code == 405:
            pass

        return res

    
    def place_order_json(self, request: shared.Order) -> operations.PlaceOrderJSONResponse:
        r"""Place an order for a pet
        Place a new order in the store
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/store/order'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlaceOrderJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Order])
                res.order = out
        elif http_res.status_code == 405:
            pass

        return res

    
    def place_order_raw(self, request: bytes) -> operations.PlaceOrderRawResponse:
        r"""Place an order for a pet
        Place a new order in the store
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/store/order'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlaceOrderRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Order])
                res.order = out
        elif http_res.status_code == 405:
            pass

        return res

    